%Applying high pass filter to audio file with variable cutoff frequency (1Khz20KHz) input by user
clc;
clear;
close all;
% Load audio file
[x, fs] = audioread("C:\Users\hp\Downloads\nishad.mp4");
N = length(x);
t=(0:(N-1))/fs;
s=0.03*sin(2*pi*600*t)+0.02*sin(2*pi*1200*t);
disp("The sampling rate is: " + fs);
xn=x+s';
% User-defined cutoff frequency
fc = input('Enter cutoff frequency (20Hz-1KHz): ');
% Design high-pass filter
[b, a] = butter(10, fc / (fs / 2),"high");
[h,w] = freqz(b,a);
% App,dc.cly the filter to the input signal
y = filter(b, a, xn);
figure(1);%time domain response
%plot input signal in time domain
subplot(4,1,1);
plot(t, x), title('input signal in time domain'), xlabel('time(sec)'),
ylabel('Magnitude');
%plot input noise signal in time domain
subplot(4,1,2);
plot(t, s), title('input noise signal in time domain'), xlabel('time(sec)'),
ylabel('Magnitude');
%plot total input signal in time domain
subplot(4,1,3);
plot(t, xn), title('total input signal in time domain'), xlabel('time(sec)'),
ylabel('Magnitude');
% plot the filtered output signal in time domain
subplot(4,1,4);
plot(t, y), title('filtered output signal in time domain'), xlabel('time(sec)'),
ylabel('Magnitude');
% Plot input and output spectra
f = linspace(0, fs/2, N/2); % Positive frequencies up to Nyquist
X1=fft(x);
X2=fft(s);
X =fft(xn);
Y =fft(y);
%figure;
figure(2);%magnitude spectrum in frequency domain
%plot magnitude response of input signal
subplot(3,2,1);
plot(f, abs(X1(1:N/2))), title('Spectrum of input signal'), xlabel('Frequency
(Hz)'), ylabel('Magnitude');
8 | P a g e
subplot(3,2,3);
plot(f, abs(X2(1:N/2))), title('Spectrum of input noise signal'),
xlabel('Frequency (Hz)'), ylabel('Magnitude');
subplot(3,2,2);
plot(f, abs(X(1:N/2))), title('Spectrum of total input signal'), xlabel('Frequency
(Hz)'), ylabel('Magnitude');
% Plot magnitude response of the filter
subplot(3,2,4);
plot(w*(fs/(2*pi)), abs(h)), title('Magnitude Response of filter'),
xlabel('Frequency (Hz)'), ylabel('Magnitude');
subplot(3,2,5);
plot(w*(fs/(2*pi)), angle(h)), title('phase Response of filter'),
xlabel('Frequency (Hz)'), ylabel('Phase');
% plot the filtered output signal
subplot(3,2,6);
plot(f, abs(Y(1:N/2))), title('Spectrum of filtered output signal'),
xlabel('Frequency (Hz)'), ylabel('Magnitude');
figure(3);%power spectrum in frequency domain
subplot(4,1,1);
plot(f, (abs(X1(1:N/2))).^2), title('Power Spectrum of input signal'),
xlabel('Frequency (Hz)'), ylabel('Power');
subplot(4,1,2);
plot(f, (abs(X2(1:N/2))).^2), title('Power Spectrum of input noise signal'),
xlabel('Frequency (Hz)'), ylabel('Power');
subplot(4,1,3);
plot(f, (abs(X(1:N/2))).^2), title('Power Spectrum of total input signal'),
xlabel('Frequency (Hz)'), ylabel('Power');
% plot the filter to the input signal
subplot(4,1,4);
plot(f, (abs(Y(1:N/2))).^2), title('Spectrum of filtered output signal'),
xlabel('Frequency (Hz)'), ylabel('Power');
% Listen to the signals
%soundsc(x, fs);
%pause(20);
%soundsc(y,fs);
x_input = audioplayer(xn, fs);
play(x_input);
playblocking(x_input);
pause(2);
disp("Now playing..Output");
y_output = audioplayer(y, fs);
play(y_output);
playblocking(y_output);
